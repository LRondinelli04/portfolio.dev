---
import GitHub from "./icons/GitHub.astro";
import LinkButton from "./LinkButton.astro";
import JavaScript from "./icons/JavaScript.astro";
import Angular from "./icons/Angular.astro";
import DotNet from "./icons/DotNet.astro";
import Html from "./icons/Html.astro";
import Css from "./icons/Css.astro";
import Bootstrap from "./icons/Bootstrap.astro";
import Typescript from "./icons/Typescript.astro";
import Csharp from "./icons/Csharp.astro";
import Link from "./icons/Link.astro";
import Scss from "./icons/Scss.astro";
import TaigaUI from "./icons/TaigaUI.astro";


const TAGS = {
  JAVASCRIPT: {
    name: "JavaScript",
    class: "bg-[#F7DF1E] text-black",
    icon: JavaScript,
  },
  ANGULAR: {
    name: "Angular",
    class: "bg-[#DD0031] text-white",
    icon: Angular,
  },
  DOTNET: {
    name: ".NET",
    class: "bg-[#512BD4] text-white",
    icon: DotNet,
  },
  HTML: {
    name: "HTML",
    class: "bg-[#E34C26] text-white",
    icon: Html,
  },
  CSS: {
    name: "CSS",
    class: "bg-[#264DE4] text-white",
    icon: Css,
  },
  BOOTSTRAP: {
    name: "Bootstrap",
    class: "bg-[#7952b3] text-white",
    icon: Bootstrap,
  },
  TYPESCRIPT: {
    name: "TypeScript",
    class: "bg-[#3178C6] text-white",
    icon: Typescript,
  },
  CSHARP: {
    name: "C#",
    class: "bg-[#239120] text-white",
    icon: Csharp,
  },
  SCSS: {
    name: "SCSS",
    class: "bg-[#C6538C] text-white",
    icon: Scss,
  },
  TAIGAUI: {
    name: "TaigaUI",
    class: "bg-[#FF4D4F] text-white",
    icon: TaigaUI,
  },
};

const PROJECTS = [
  {
    title: "Gestor de Presupuesto",
    description:
      "Aplicación web para gestionar un presupuesto y sus gastos, desarrollada con Angular. Permite ingresar un presupuesto inicial, agregar servicios con sus respectivos gastos, sumar al presupuesto existente y reiniciarlo.",
    github: "https://github.com/LRondinelli04/Presupuesto",
    link: "https://presupuesto-ashen.vercel.app",
    image: "/projects/Presupuesto.jpg",
    tags: [TAGS.ANGULAR, TAGS.TYPESCRIPT, TAGS.HTML, TAGS.CSS, TAGS.BOOTSTRAP],
  },
  {
    title: "Juego Interactivo de Preguntas y Respuestas - Conexión Local",
    description:
      "Juego interactivo para dos jugadores, diseñado con JavaScript, HTML y CSS, que utiliza Socket.io para establecer una conexión local. Esta implementación garantiza una experiencia de juego fluida y en tiempo real.",
    github: "https://github.com/LRondinelli04/Preguntas-y-Respuestas",
    image: "/projects/TPFinalJS.jpg",
    tags: [TAGS.JAVASCRIPT, TAGS.HTML, TAGS.CSS, TAGS.BOOTSTRAP],
  },
  {
    title: "IT Resto - Página Responsive de Restaurante",
    description:
      "Página web responsive para un restaurante, que permite visualizar promociones, menú, información de contacto y un formulario para realizar pedidos de delivery. Desarrollada con HTML, CSS, SCSS y JavaScript para ofrecer una experiencia de usuario atractiva y funcional en cualquier dispositivo.",
    github: "https://github.com/LRondinelli04/IT_Resto",
    link: "https://it-resto.vercel.app/",
    image: "/projects/ITResto.jpg",
    tags: [TAGS.HTML, TAGS.CSS, TAGS.SCSS, TAGS.JAVASCRIPT],
  },
  {
    title: "WebApp de Monitoreo de Servicios y Servidores",
    description:
      "Aplicación web para monitorear servicios y servidores, desarrollada con Angular (TypeScript y TaigaUI) para el frontend y .NET (C#) para el backend.",
      details: [
      {
        title: "Arquitectura Modular",
        items: [
          {data: "Organización jerárquica de servicios agrupados por aplicaciones."},
          {data: "Sistema de cards interactivas con semáforo de estado (🟢 OK | 🟠 WARNING | 🔴 ERROR)."},
          {data: "Monitoreo de métricas clave:", 
           subData:[   
            "Servicios: Tiempo de respuesta (ms).",
            "Servidores: Espacio en disco (GB/libre)."
          ]},
        ],
      },
      {
        title: "Gestión Dinámica",
        items: [
         { data: "▶️ Configuración de intervalos de actualización automática."},
          {data: "✏️ Edición en línea de parámetros de monitoreo."},
          {data: "🗑️ Eliminación segura de elementos obsoletos."},
          {data: "🚫 Deshabilitación selectiva de checks (evita llamadas a endpoints)."},
          {data: "➕ Creación de nuevos elementos mediante formularios contextuales:", 
          subData: [
            "Servicios (con validación de endpoints).",
            "Servidores",
            "Aplicaciones (agrupadores lógicos)." 
          ]},
        ],
      },
      {
        title: "Personalización Avanzada",
        items: [
          {data: "⇅ Drag-and-Drop para reordenar aplicaciones y organizar cards según preferencia del usuario modificando su valor de orden.",
            subData: [
              "Reordenar aplicaciones (agrupaciones de servicios)",
              "Organizar cards según preferencia del usuario"
            ]
          },
          {data: "Persistencia de configuración personalizada (localStorage + backend)."},
          {data: "Sistema de priorización visual mediante ordenamiento manual."},
        ],
      },
      {
        title: "Funcionalidades Técnicas",
        items: [
          {data: "Histórico gráfico temporal para: ", 
            subData: [
              "Performance de servicios (series temporales)",
              "Evolución de capacidad en servidores"
            ]
          },
          {data: "Detalle expandible por card con: ", 
            subData: [
              "Métricas específicas por disco (servidores)",
              "Logs de últimos checks (servicios)",
              "Acciones rápidas de gestión"
            ]
          },
          {data: "Modo mantenimiento (pausa temporal de monitoreo)"},
          {data: "Notificaciones visuales para cambios de estado"},
        ]
      },
      {
        title: "Experiencia de Usuario:",
        items: [
          {data: "Interfaz responsive con 3 vistas diferentes (mobile/tablet/desktop)"},
          {data: "Auto-guardado de configuraciones"},
          {data: "Feedback visual en tiempo real durante operaciones"},
        ]
      }
    ],
    /* image: "/projects/monitoreo/m1.jpg", */
    images: [
      {
        src: "/projects/monitoreo/m1.jpg",
        alt: "WebApp",
      },
      {
        src: "/projects/monitoreo/m2.jpg",
        alt: "WebApp",
      },
      {
        src: "/projects/monitoreo/m3.jpg",
        alt: "WebApp",
      },
      {
        src: "/projects/monitoreo/m4.jpg",
        alt: "WebApp",
      },
      {
        src: "/projects/monitoreo/m5.jpg",
        alt: "WebApp",
      },
      {
        src: "/projects/monitoreo/m6.jpg",
        alt: "WebApp",
      },
      {
        src: "/projects/monitoreo/m7.jpg",
        alt: "WebApp",
      },
      {
        src: "/projects/monitoreo/m8.jpg",
        alt: "WebApp",
      },
    ],
    tags: [
      TAGS.ANGULAR,
      TAGS.TYPESCRIPT,
      TAGS.TAIGAUI,
      TAGS.DOTNET,
      TAGS.CSHARP,
    ],
  },
];

// Función para obtener la primera imagen
/**
 * Interface for project structure
 */
interface Project {
  title: string;
  description?: string;
  github?: string;
  link?: string;
  image?: string;
  images?: { src: string; alt: string }[];
  tags: { name: string; class: string; icon: any }[];
}

const getFirstImage = (project: Project) => {
  const projectData = PROJECTS.find((p) => p.title === project.title);
  return (
    projectData?.image ||
    (projectData?.images && projectData.images.length > 0
      ? projectData.images[0].src
      : "")
  );
};
---

<style>
  /* Estilos del carrusel */
  .carousel-inner {
    position: relative;
    width: 100%;
    overflow: hidden;
    transition: transform 0.3s ease-in-out;
  }

  .carousel-inner:hover {
    transform: scale(1.02);
  }

  .carousel-item {
    position: absolute;
    top: 0;
    left: 100%;
    width: 100%;
    opacity: 0;
    transition:
      opacity 0.5s ease-in-out,
      transform 0.5s ease-in-out;
  }

  .carousel-item.active {
    position: relative;
    left: 0;
    opacity: 1;
    transform: translateX(0);
  }

  .carousel-controls {
    display: flex;
    justify-content: center;
    gap: 30%;
  }

  .carouselImg-control-prev,
  .carouselImg-control-next {
    position: relative;
    transform: translateY(0);
    color: white;
    margin: 1rem;
    cursor: pointer;
    border: none;
    border-radius: 50%;
    z-index: 10;
  }

  .carouselImg-control-prev-icon,
  .carouselImg-control-next-icon {
    font-size: 2rem;
  }

  /* Estilos del modal */
  .image-modal {
    display: none;
    position: fixed;
    z-index: 1000;
    left: 0;
    top: 0;
    width: 100%;
    height: 100%;
    background-color: rgba(0, 0, 0, 0.9);
    overflow: auto;
    align-items: center;
    justify-content: center;
  }

  .image-modal.open {
    display: flex;
  }

  .modal-content {
    max-width: 90%;
    max-height: 90%;
    object-fit: contain;
    cursor: pointer;
    border-radius: 8px;
    animation: zoomIn 0.3s ease;
  }

  @keyframes zoomIn {
    from { transform: scale(0.8); }
    to { transform: scale(1); }
  }

  .modal-close {
    position: absolute;
    top: 25px;
    right: 35px;
    color: white;
    font-size: 40px;
    font-weight: bold;
    cursor: pointer;
    transition: 0.3s;
  }

  .modal-close:hover {
    color: #ddd;
  }

  @media (max-width: 768px) {
    .modal-close {
      display: none;
    }
  }

  /* Estilos generales */
  .project-image-container {
    cursor: zoom-in;
    transition: transform 0.2s;
    border-radius: 12px;
    overflow: hidden;
    height: 400px;
  }

  .project-image {
    width: 100%;
    height: 100%;
    object-fit: cover;
    transition: transform 0.3s;
  }

  .project-image-container:hover .project-image {
    transform: scale(1.05);
  }

  .accordion-icon {
    transition: transform 0.3s;
  }
  .accordion-icon.rotated {
    transform: rotate(180deg);
  }
</style>

<div class="flex flex-col gap-y-16">
  {PROJECTS.map((project) => {
    const hasMultipleImages = (project.images?.length ?? 0) > 1;
    const images = project.images || [{ src: project.image, alt: project.title }];
    
    return (
      <article class="flex flex-col space-x-0 space-y-8 group md:flex-row md:space-x-8 md:space-y-0">
        <!-- Sección de imágenes -->
        <div class="w-full md:w-1/2">
          {hasMultipleImages ? (
            <section class="carousel">
              <div class="carousel-inner">
                {images.map((img, index) => (
                  <div class={`carousel-item ${index === 0 ? "active" : ""}`}>
                    <div class="project-image-container" data-image-src={img.src}>
                      <img
                        src={img.src}
                        alt={img.alt}
                        class="project-image"
                        loading="lazy"
                      />
                    </div>
                  </div>
                ))}
              </div>
              
              <div class="carousel-controls">
                <button class="carouselImg-control-prev">
                  <span class="carouselImg-control-prev-icon inline-flex items-center justify-center gap-2 px-4 py-1 text-gray-800 transition bg-gray-100 border border-gray-300 rounded-full dark:bg-gray-800 dark:border-gray-600 dark:text-white focus-visible:ring-yellow-500/80 text-md hover:bg-gray-900 hover:border-gray-700 hover:text-white dark:hover:bg-gray-100 dark:hover:border-gray-300 dark:hover:text-black group max-w-fit focus:outline-none focus-visible:outline-none focus-visible:ring focus-visible:ring-white focus-visible:ring-offset-2 active:bg-black transform transition-transform duration-300 hover:scale-110">‹</span>
                </button>
                <button class="carouselImg-control-next">
                  <span class="carouselImg-control-next-icon inline-flex items-center justify-center gap-2 px-4 py-1 text-gray-800 transition bg-gray-100 border border-gray-300 rounded-full dark:bg-gray-800 dark:border-gray-600 dark:text-white focus-visible:ring-yellow-500/80 text-md hover:bg-gray-900 hover:border-gray-700 hover:text-white dark:hover:bg-gray-100 dark:hover:border-gray-300 dark:hover:text-black group max-w-fit focus:outline-none focus-visible:outline-none focus-visible:ring focus-visible:ring-white focus-visible:ring-offset-2 active:bg-black transform transition-transform duration-300 hover:scale-110">›</span>
                </button>
              </div>
            </section>
          ) : (
            <div class="project-image-container" data-image-src={images[0].src}>
              <img
                src={images[0].src}
                alt={project.title}
                class="project-image"
                loading="lazy"
              />
            </div>
          )}
        </div>

        <!-- Detalles del proyecto -->
        <div class="w-full md:w-1/2 md:max-w-lg">
          <h3 class="text-2xl font-bold text-gray-800 dark:text-gray-100">
            {project.title}
          </h3>
          
          <div class="flex flex-wrap mt-2">
            <ul class="flex flex-wrap gap-2 mb-2">
              {project.tags.map((tag) => (
                <li>
                  <span class={`inline-flex gap-x-2 rounded-full text-xs ${tag.class} py-1 px-2`}>
                    <tag.icon class="size-4" />
                    {tag.name}
                  </span>
                </li>
              ))}
            </ul>
          </div>

          <div class="mt-2 text-gray-700 dark:text-gray-400">
            {project.description}
          </div>

          {project.details && (
          <div id="accordion-flush" data-accordion="collapse">
            <h2 id="accordion-flush-heading-1">
              <button
                type="button"
                class="flex items-center justify-between w-full p-5 font-medium border-b border-gray-200 dark:border-gray-700 gap-3 accordion-toggle"
                data-accordion-target="#accordion-flush-body-1"
                aria-expanded="false"
              >
                <span>Detalles técnicos avanzados</span>
                <svg class="w-3 h-3 shrink-0 transition-transform duration-300 accordion-icon" aria-hidden="true">
                  <path
                    stroke="currentColor"
                    stroke-linecap="round"
                    stroke-linejoin="round"
                    stroke-width="2"
                    d="M9 5 5 1 1 5"
                  />
                </svg>
              </button>
            </h2>
            <div id="accordion-flush-body-1" class="hidden">
              <div class="py-5 border-b border-gray-200 dark:border-gray-700">
                {project.details && (
                  <div>
                    {project.details.map((section) => (
                      <div class="mb-4">
                        <h4 class="text-lg font-semibold text-gray-800 dark:text-gray-100">
                          {section.title}
                        </h4>
                        <ul class="list-disc list-inside text-gray-600 dark:text-gray-300">
                          {section.items.map((item) => (
                            <li>
                              {item.data}
                              {item.subData && (
                                <ul class="list-disc list-inside ml-6">
                                  {item.subData.map((subItem) => (
                                    <li>{subItem}</li>
                                  ))}
                                </ul>
                              )}
                            </li>
                          ))}
                        </ul>
                      </div>
                    ))}
                  </div>
                )}
              </div>
            </div>
          </div>
          )}

          <footer class="flex items-end justify-start mt-4 gap-x-4">
            {project.github && (
              <LinkButton href={project.github}>
                <GitHub class="size-6" />
                Code
              </LinkButton>
            )}

            {project.link && (
              <LinkButton href={project.link}>
                <Link class="size-5" />
                Preview
              </LinkButton>
            )}
          </footer>
        </div>
      </article>
    );
  })}
</div>

<!-- Modal para imagen ampliada -->
<div id="imageModal" class="image-modal">
  <span class="modal-close" onclick="closeModal()">&times;</span>
  <img id="modalImage" class="modal-content">
</div>

<script is:inline>
  // Control del carrusel
  document.addEventListener('DOMContentLoaded', () => {
    document.querySelectorAll('.carousel').forEach(carousel => {
      let currentSlide = 0;
      const slides = carousel.querySelectorAll('.carousel-item');
      const totalSlides = slides.length;
      let autoplayTimeout;
      let isAnimating = false;

      const updateCarousel = (direction) => {
        if (isAnimating || totalSlides < 2) return;
        isAnimating = true;

        slides.forEach((slide, index) => {
          slide.classList.remove('prev', 'active');
          if (index === currentSlide) {
            slide.classList.add('active');
          } else if (index === (currentSlide - 1 + totalSlides) % totalSlides) {
            slide.classList.add('prev');
          }
        });

        setTimeout(() => isAnimating = false, 500);
      };

      const startAutoplay = () => {
        if (totalSlides < 2) return;
        autoplayTimeout = setTimeout(() => {
          currentSlide = (currentSlide + 1) % totalSlides;
          updateCarousel('next');
          startAutoplay();
        }, 7000);
      };

      carousel.querySelector('.carouselImg-control-next')?.addEventListener('click', () => {
        clearTimeout(autoplayTimeout);
        currentSlide = (currentSlide + 1) % totalSlides;
        updateCarousel('next');
        startAutoplay();
      });

      carousel.querySelector('.carouselImg-control-prev')?.addEventListener('click', () => {
        clearTimeout(autoplayTimeout);
        currentSlide = (currentSlide - 1 + totalSlides) % totalSlides;
        updateCarousel('prev');
        startAutoplay();
      });

      startAutoplay();
      updateCarousel('init');
    });

    document.querySelectorAll('.accordion-toggle').forEach(btn => {
      btn.addEventListener('click', () => {
        const targetId = btn.getAttribute('data-accordion-target');
        const body = document.querySelector(targetId);
        const icon = btn.querySelector('.accordion-icon');
        const isOpen = !body.classList.contains('hidden');
        if (isOpen) {
          body.classList.add('hidden');
          icon.classList.remove('rotated');
          btn.setAttribute('aria-expanded', 'false');
        } else {
          body.classList.remove('hidden');
          icon.classList.add('rotated');
          btn.setAttribute('aria-expanded', 'true');
        }
      });
    });

    // Control del modal
    const modal = document.getElementById('imageModal');
    const modalImg = document.getElementById('modalImage');

    document.querySelectorAll('.project-image-container').forEach(container => {
      container.addEventListener('click', () => {
        const imgSrc = container.querySelector('img').src;
        modal.classList.add('open');
        modalImg.src = imgSrc;
      });
    });

    function closeModal() {
      modal.classList.remove('open');
    }

    // Cerrar modal al hacer clic fuera o en la X
    modal.addEventListener('click', (e) => {
      if (e.target === modal || e.target.classList.contains('modal-close')) {
        closeModal();
      }
    });

    // Cerrar con ESC
    document.addEventListener('keydown', (e) => {
      if (e.key === 'Escape' && modal.classList.contains('open')) {
        closeModal();
      }
    });
  });
</script>