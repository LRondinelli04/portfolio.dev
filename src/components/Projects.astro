---
import GitHub from "./icons/GitHub.astro";
import LinkButton from "./LinkButton.astro";
import JavaScript from "./icons/JavaScript.astro";
import Angular from "./icons/Angular.astro";
import DotNet from "./icons/DotNet.astro";
import Html from "./icons/Html.astro";
import Css from "./icons/Css.astro";
import Bootstrap from "./icons/Bootstrap.astro";
import Typescript from "./icons/Typescript.astro";
import Csharp from "./icons/Csharp.astro";
import Link from "./icons/Link.astro";
import Scss from "./icons/Scss.astro";
import TaigaUI from "./icons/TaigaUI.astro";

const TAGS = {
  JAVASCRIPT: {
    name: "JavaScript",
    class: "bg-[#F7DF1E] text-black",
    icon: JavaScript,
  },
  ANGULAR: {
    name: "Angular",
    class: "bg-[#DD0031] text-white",
    icon: Angular,
  },
  DOTNET: {
    name: ".NET",
    class: "bg-[#512BD4] text-white",
    icon: DotNet,
  },
  HTML: {
    name: "HTML",
    class: "bg-[#E34C26] text-white",
    icon: Html,
  },
  CSS: {
    name: "CSS",
    class: "bg-[#264DE4] text-white",
    icon: Css,
  },
  BOOTSTRAP: {
    name: "Bootstrap",
    class: "bg-[#7952b3] text-white",
    icon: Bootstrap,
  },
  TYPESCRIPT: {
    name: "TypeScript",
    class: "bg-[#3178C6] text-white",
    icon: Typescript,
  },
  CSHARP: {
    name: "C#",
    class: "bg-[#239120] text-white",
    icon: Csharp,
  },
  SCSS: {
    name: "SCSS",
    class: "bg-[#C6538C] text-white",
    icon: Scss,
  },
  TAIGAUI: {
    name: "TaigaUI",
    class: "bg-[#FF4D4F] text-white",
    icon: TaigaUI,
  },
};

const PROJECTS = [
  {
    title: "Gestor de Presupuesto",
    description:
      "Aplicación web para gestionar un presupuesto y sus gastos, desarrollada con Angular. Permite ingresar un presupuesto inicial, agregar servicios con sus respectivos gastos, sumar al presupuesto existente y reiniciarlo.",
    github: "https://github.com/LRondinelli04/Presupuesto",
    link: "https://presupuesto-ashen.vercel.app",
    image: "/projects/Presupuesto.jpg",
    tags: [TAGS.ANGULAR, TAGS.TYPESCRIPT, TAGS.HTML, TAGS.CSS, TAGS.BOOTSTRAP],
  },
  {
    title: "Juego Interactivo de Preguntas y Respuestas - Conexión Local",
    description:
      "Juego interactivo para dos jugadores, diseñado con JavaScript, HTML y CSS, que utiliza Socket.io para establecer una conexión local. Esta implementación garantiza una experiencia de juego fluida y en tiempo real.",
    github: "https://github.com/LRondinelli04/Preguntas-y-Respuestas",
    image: "/projects/TPFinalJS.jpg",
    tags: [TAGS.JAVASCRIPT, TAGS.HTML, TAGS.CSS, TAGS.BOOTSTRAP],
  },
  {
    title: "IT Resto - Página Responsive de Restaurante",
    description:
      "Página web responsive para un restaurante, que permite visualizar promociones, menú, información de contacto y un formulario para realizar pedidos de delivery. Desarrollada con HTML, CSS, SCSS y JavaScript para ofrecer una experiencia de usuario atractiva y funcional en cualquier dispositivo.",
    github: "https://github.com/LRondinelli04/IT_Resto",
    link: "https://it-resto.vercel.app/",
    image: "/projects/ITResto.jpg",
    tags: [TAGS.HTML, TAGS.CSS, TAGS.SCSS, TAGS.JAVASCRIPT],
  },
  {
    title: "WebApp de Monitoreo de Servicios y Servidores",
    description:
      "Aplicación web para monitorear servicios y servidores, desarrollada con Angular (TypeScript y TaigaUI) para el frontend y .NET (C#) para el backend.",
    details:
      "Aplicación web desarrollada para la Fiscalía de Estado que monitorea el estado de los servicios y servidores más utilizados por el área de informática. Los estados se representan en forma de tarjetas con un semáforo de colores: verde (OK), naranja (WARNING) y rojo (ERROR). Los servicios se evalúan según el tiempo de respuesta en milisegundos y los servidores según el espacio disponible en los discos. La aplicación permite configurar el tiempo de actualización automática y ofrece una sección de detalles para cada tarjeta, donde se puede visualizar un historial gráfico del tiempo de respuesta de los servicios y los datos específicos de cada disco de los servidores.",
    image: "/projects/Monitoreo.jpg",
    tags: [
      TAGS.ANGULAR,
      TAGS.TYPESCRIPT,
      TAGS.TAIGAUI,
      TAGS.DOTNET,
      TAGS.CSHARP,
    ],
  },
];
---

<div class="flex flex-col gap-y-16">
  {
    PROJECTS.map(
      ({ image, title, description, tags, github, link, details }) => (
        <article class="flex flex-col space-x-0 space-y-8 group md:flex-row md:space-x-8 md:space-y-0">
          <div class="w-full md:w-1/2">
            <div class="relative flex flex-col items-center col-span-6 row-span-5 gap-8 transition duration-500 ease-in-out transform shadow-xl overflow-clip rounded-xl sm:rounded-xl md:group-hover:-translate-y-1 md:group-hover:shadow-2xl lg:border lg:border-gray-800 lg:hover:border-gray-700 lg:hover:bg-gray-800/50 h-80">
              <img
                alt={title}
                class="object-cover object-top w-full h-56 transition duration-500 sm:h-full md:scale-110 md:group-hover:scale-105"
                loading="lazy"
                src={image}
              />
            </div>
          </div>

          <div class="w-full md:w-1/2 md:max-w-lg">
            <h3 class="text-2xl font-bold text-gray-800 dark:text-gray-100">
              {title}
            </h3>
            <div class="flex flex-wrap mt-2">
              <ul class="flex flex-wrap gap-2 mb-2">
                {tags.map((tag) => (
                  <li>
                    <span
                      class={`inline-flex gap-x-2 rounded-full text-xs ${tag.class} py-1 px-2`}
                    >
                      <tag.icon class="size-4" />
                      {tag.name}
                    </span>
                  </li>
                ))}
              </ul>
            </div>

            <div class="mt-2 text-gray-700 dark:text-gray-400">
              {description}
            </div>
            {details && (
              <div
                id="accordion-flush"
                data-accordion="collapse"
                data-active-classes="bg-white dark:bg-gray-900 text-gray-900 dark:text-white"
                data-inactive-classes="text-gray-500 dark:text-gray-400"
              >
                <h2 id="accordion-flush-heading-1">
                  <button
                    type="button"
                    class="flex items-center justify-between w-full py-5 font-medium rtl:text-right text-gray-500 border-b border-gray-200 dark:border-gray-700 dark:text-gray-400 gap-3"
                    data-accordion-target="#accordion-flush-body-1"
                    aria-expanded="true"
                    aria-controls="accordion-flush-body-1"
                  >
                    <span>Detalles de la aplicación</span>
                    <svg
                      data-accordion-icon
                      class="w-3 h-3 rotate-180 shrink-0"
                      aria-hidden="true"
                      xmlns="http://www.w3.org/2000/svg"
                      fill="none"
                      viewBox="0 0 10 6"
                    >
                      <path
                        stroke="currentColor"
                        stroke-linecap="round"
                        stroke-linejoin="round"
                        stroke-width="2"
                        d="M9 5 5 1 1 5"
                      />
                    </svg>
                  </button>
                </h2>
                <div
                  id="accordion-flush-body-1"
                  class="hidden"
                  aria-labelledby="accordion-flush-heading-1"
                >
                  <div class="py-5 border-b border-gray-200 dark:border-gray-700">
                    <p class="mb-2 text-gray-500 dark:text-gray-400">
                      {details}
                    </p>
                  </div>
                </div>
              </div>
            )}
            <footer class="flex items-end justify-start mt-4 gap-x-4">
              {github && (
                <LinkButton href={github}>
                  <GitHub class="size-6" />
                  Code
                </LinkButton>
              )}

              {link && (
                <LinkButton href={link}>
                  <Link class="size-5" />
                  Preview
                </LinkButton>
              )}
            </footer>
          </div>
        </article>
      )
    )
  }
</div>
