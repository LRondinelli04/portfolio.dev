---
// Importaciones necesarias
import GitHub from "./icons/GitHub.astro";
import LinkButton from "./LinkButton.astro";

// TOKEN den acceso a la API de GitHub
const GITHUB_TOKEN = import.meta.env.GITHUB_TOKEN; // Usa una variable de entorno

// Función para obtener lenguajes y porcentajes
async function fetchLanguages(repo: string) {
  const response = await fetch(`https://api.github.com/repos/LRondinelli04/${repo}/languages`, {
    headers: {
      'Authorization': `token ${GITHUB_TOKEN}`
    }
  });

  console.log("GITHUB_TOKEN:", GITHUB_TOKEN);

  if (!response.ok) {
    const errorData = await response.json();
    console.error("Error fetching languages:", errorData);
    return {}; // Retorna un objeto vacío para evitar errores posteriores
  }

  const data = await response.json();

  let totalBytes = 0;
  for (const language in data) {
    totalBytes += data[language];
  }

  const percentages: { [key: string]: string } = {};
  for (const language in data) {
    percentages[language] = ((data[language] / totalBytes) * 100).toFixed(2) as string;
  }

  return percentages;
}

// Función para asignar colores a los lenguajes (basado en GitHub)
function getColorForLanguage(language: string) {
  const languageColors: { [key: string]: string } = {
    "TypeScript": "#3178c6",
    "Java": "#b07219",
    "JavaScript": "#f1e05a",
    "HTML": "#e34c26",
    "CSS": "#563d7c",
    "C#": "#178600",
    "SCSS": "#c6538c",
    "Astro": "#ff5a03",
    "Handlebars": "#f7931e",
    "PHP": "#4F5D95", 
    // Añade más lenguajes y colores según tu preferencia
  };

  return languageColors[language] || "#ccc"; // Color predeterminado si no se encuentra
}

// Repositorios principales
const MAIN_REPOS = [
  {
    title: "Licenciatura en Sistemas - APU",
    description:
      "Repositorio de prácticas y proyectos de programación desarrollados en el marco de la Licenciatura en Sistemas y APU en la Facultad de Informática - UNLP.",
    github: "https://github.com/LRondinelli04/Licenciatura-en-Sistemas_APU",
  },
  {
    title: "Desarrollo Web",
    description:
      "Repositorio de prácticas y proyectos de programación desarrollados en el marco de la carrera de Desarrollador Front End ofrecida por EducacionIT.",
    github: "https://github.com/LRondinelli04/Desarrollo_Web",
  },
  {
    title: "Fiscalia de Estado",
    description:
      "Repositorio que recopila los trabajos durante la pasantía en la Fiscalía de Estado.",
    github: "https://github.com/LRondinelli04/Fiscalia-de-Estado",
  },
  {
    title: "Portfolio.dev",
    description: "Repositorio con el código fuente de mi portfolio personal.",
    github: "https://github.com/LRondinelli04/portfolio.dev",
  },
];

// Obteniendo los lenguajes para cada repositorio
const repoLanguages = await Promise.all(
  MAIN_REPOS.map(async ({ github }) => {
    const repoInfo = github.split("https://github.com/LRondinelli04/")[1].split("/");
    const [repo] = repoInfo;
    const languages = await fetchLanguages(repo);
    return languages;
  })
);
---

<!-- Sección de Repositorios Principales -->
<section id="carouselExample" class="carousel slide mt-16">
  <div class="carousel-inner flex relative">
    {MAIN_REPOS.map(({ title, description, github }, index) => (
      <div
        class={`carousel-item ${index === 0 ? "active" : ""}`}
        style="width: 100%;"
      >
        <div class="repo-card p-4 border border-gray-200 dark:border-gray-700 rounded-lg shadow-md bg-gray-100 dark:bg-gray-800 flex flex-col justify-between">
          <div>
            <h3 class="text-2xl font-bold text-gray-800 dark:text-gray-100 text-center underline">
              {title}
            </h3>
            <p class="my-2 text-gray-600 dark:text-gray-300 px-5">
              {description}
            </p>
          </div>

          <!-- Barra de lenguajes por porcentaje -->
          <div class="language-bar-container mt-4">
            {Object.entries(repoLanguages[index]).map(([language, percentage]) => (
              <div
                class="language-bar"
                style={`width: ${percentage}%; background-color: ${getColorForLanguage(language)};`}
                title={`${language}: ${percentage}%`}
              />
            ))}
          </div>
          <div class="disc-lenguajes mt-4">
            {Object.entries(repoLanguages[index]).map(([language, percentage]) => (
              <li style={`color: ${getColorForLanguage(language)}; list-style: disc; list-style-position: inside;`}>
                <span class="lenguajes"><strong>{language}</strong> - {percentage}%</span>
              </li>
            ))}
          </div>

          <div class="code my-2">
            <div class="code">
              <a href={github} class="btn btn-primary mt4">
                <LinkButton href={github}>
                  <GitHub class="size-6" />
                  Code
                </LinkButton>
              </a>
            </div>
          </div>
        </div>
      </div>
    ))}
  </div>

  <!-- Botones de navegación -->
  <div class="carousel-controls flex justify-center mt-4">
    <button class="carousel-control-prev" type="button">
      <span
        class="carousel-control-prev-icon inline-flex items-center justify-center gap-2 px-4 py-1 text-gray-800 transition bg-gray-100 border border-gray-300 rounded-full dark:bg-gray-800 dark:border-gray-600 dark:text-white focus-visible:ring-yellow-500/80 text-md hover:bg-gray-900 hover:border-gray-700 hover:text-white dark:hover:bg-gray-100 dark:hover:border-gray-300 dark:hover:text-black group max-w-fit focus:outline-none focus-visible:outline-none focus-visible:ring focus-visible:ring-white focus-visible:ring-offset-2 active:bg-black transform transition-transform duration-300 hover:scale-110"
        aria-hidden="true">‹</span
      >
      <span class="visually-hidden">Previous</span>
    </button>
    <button class="carousel-control-next" type="button">
      <span
        class="carousel-control-next-icon inline-flex items-center justify-center gap-2 px-4 py-1 text-gray-800 transition bg-gray-100 border border-gray-300 rounded-full dark:bg-gray-800 dark:border-gray-600 dark:text-white focus-visible:ring-yellow-500/80 text-md hover:bg-gray-900 hover:border-gray-700 hover:text-white dark:hover:bg-gray-100 dark:hover:border-gray-300 dark:hover:text-black group max-w-fit focus:outline-none focus-visible:outline-none focus-visible:ring focus-visible:ring-white focus-visible:ring-offset-2 active:bg-black transform transition-transform duration-300 hover:scale-110"
        aria-hidden="true">›</span
      >
      <span class="visually-hidden">Next</span>
    </button>
  </div>

  <!-- Indicadores del carrusel -->
  <div
    class="carousel-indicators absolute z-30 flex -translate-x-1/2 bottom-5 left-1/2 space-x-3 rtl:space-x-reverse"
  >
    {MAIN_REPOS.map((_, index) => (
      <button
        type="button"
        class="w-3 h-3 rounded-full"
        aria-current={index === 0 ? "true" : "false"}
        aria-label={`Slide ${index + 1}`}
        data-carousel-slide-to={index}
      />
    ))}
  </div>
</section>

<style>

  .lenguajes{
    @apply text-black dark:text-white;
    list-style: disc;
    list-style-position: inside;
  }

  .repo-card {
    padding-bottom: 0;
  }

  .carousel-inner {
    position: relative;
    width: 100%;
    overflow: hidden;
    transition: transform 0.3s ease-in-out;
  }

  .carousel-inner:hover {
    transform: scale(1.02);
  }

  .carousel-item {
    position: absolute;
    top: 0;
    left: 100%;
    width: 100%;
    opacity: 0;
    transition:
      opacity 0.5s ease-in-out,
      transform 0.5s ease-in-out;
  }

  .carousel-item.active {
    position: relative;
    left: 0;
    opacity: 1;
    transform: translateX(0);
  }

  .carousel-controls {
    display: flex;
    justify-content: center;
    gap: 1rem;
  }

  .carousel-control-prev,
  .carousel-control-next {
    position: relative;
    transform: translateY(0);
    color: white;
    padding: 1rem;
    cursor: pointer;
    border: none;
    border-radius: 50%;
    z-index: 10;
  }

  .carousel-control-prev-icon,
  .carousel-control-next-icon {
    font-size: 2rem;
  }

  .visually-hidden {
    position: absolute;
    width: 1px;
    height: 1px;
    padding: 0;
    margin: -1px;
    overflow: hidden;
    clip: rect(0, 0, 0, 0);
    border: 0;
  }

  .carousel-indicators button {
    background-color: gray;
  }

  .carousel-indicators button[aria-current="true"] {
    background-color: black;
  }

  .language-bar-container {
    display: flex;
    height: 10px;
    border-radius: 5px;
    overflow: hidden;
    background-color: #e0e0e0;
  }

  .language-bar {
    height: 100%;
  }

  .code {
    display: flex;
    justify-content: flex-end;
  }

  .disc-lenguajes{
    display: grid;
    grid-template-columns: repeat(3, 1fr);
    padding-bottom: 1rem;
  }

  /* responsive para mobile */
  @media (max-width: 550px) {
    .disc-lenguajes {
      grid-template-columns: repeat(2, 1fr);
      gap: 0.5rem
      ;
    }
  }

  @media (max-width: 420px) {
    .disc-lenguajes{
      grid-template-columns: 1fr;
    }
    
  }

</style>

<script>
  let currentSlide = 0;
  const slides = document.querySelectorAll(".carousel-item");
  const totalSlides = slides.length;
  let autoplayTimeout: ReturnType<typeof setTimeout>;
  let isAnimating = false;

  const updateCarousel = (direction: string) => {
    if (isAnimating) return;
    isAnimating = true;

    slides.forEach((slide, index) => {
      slide.classList.remove("prev", "active");
      if (index === currentSlide) {
        slide.classList.add("active");
      } else if (index === (currentSlide - 1 + totalSlides) % totalSlides) {
        slide.classList.add("prev");
      }
    });

    setTimeout(() => {
      isAnimating = false;
    }, 500); // Duración de la transición
  };

  const startAutoplay = () => {
    autoplayTimeout = setTimeout(() => {
      currentSlide = (currentSlide + 1) % totalSlides;
      updateCarousel("next");
      startAutoplay(); // Reinicia el autoplay
    }, 7000); // 7 segundos
  };

  // Botón "Next"
  const nextButton = document.querySelector(".carousel-control-next");
  if (nextButton) {
    nextButton.addEventListener("click", () => {
      clearTimeout(autoplayTimeout);
      currentSlide = (currentSlide + 1) % totalSlides;
      updateCarousel("next");
      startAutoplay();
    });
  }

  // Botón "Prev"
  const prevButton = document.querySelector(".carousel-control-prev");
  if (prevButton) {
    prevButton.addEventListener("click", () => {
      clearTimeout(autoplayTimeout);
      currentSlide = (currentSlide - 1 + totalSlides) % totalSlides;
      updateCarousel("prev");
      startAutoplay();
    });
  }

  // Indicadores del carrusel
  const indicators = document.querySelectorAll(".carousel-indicators button");
  indicators.forEach((indicator, index) => {
    indicator.addEventListener("click", () => {
      clearTimeout(autoplayTimeout);
      currentSlide = index;
      updateCarousel("next");
      startAutoplay();
    });
  });

  // Iniciar autoplay al cargar la página
  startAutoplay();
</script>
